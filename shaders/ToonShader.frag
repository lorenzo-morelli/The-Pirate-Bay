#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 1) uniform GlobalUniformBufferObject {    vec3 selector;    vec3 lightDir;    vec3 lightColor;    vec3 eyePos;    float time;} gubo;vec3 toonDiffuse(vec3 L, vec3 N, vec3 V, vec3 C0, vec3 C1, vec3 C2, vec3 C3, vec3 C4, vec3 C5, float t0, float t1, float t2, float t3, float t4) {    float cosAngle = dot(L, N);    vec3 color;    if (cosAngle >= t4) color = C5;    else if (cosAngle >= t3) color = C4;    else if (cosAngle >= t2) color = C3;    else if (cosAngle >= t1) color = C2;    else if (cosAngle >= t0) color = C1;    else color = C0;    return color;}vec3 toonSpecular(vec3 L, vec3 N, vec3 V, vec3 C, float thr)  {    float intensity = dot(V, -reflect(L, N));    vec3 color;    if (intensity >= thr) color = C;    else color = vec3(0, 0, 0);    return color;}void main() {    vec3 norm = normalize(fragNorm);    vec3 eyeDir = normalize(gubo.eyePos.xyz - fragPos);    float t = gubo.time * 100;    vec3 lightTest = normalize(vec3(cos(t), sin(t), 0.0f));    vec3 diffColor0 = vec3(10.0f, 40.0f, 10.0f)/255.0f;    vec3 diffColor1 = vec3(30.0f, 60.0f, 30.0f)/255.f;    vec3 diffColor2 = vec3(70.0f, 130.0f, 60.0f)/255.f;    vec3 diffColor3 = vec3(90.0f, 170.0f, 75.0f)/255.f;    vec3 diffColor4 = vec3(130.0f, 255.0f, 124.0f)/255.f;    vec3 diffColor5 = vec3(180.0f, 255.0f, 180.0f)/255.f;    vec3 diffuse = toonDiffuse(lightTest, norm, eyeDir, diffColor0, diffColor1, diffColor2, diffColor3, diffColor4, diffColor5, 0.1, 0.2, 0.5, 0.7, 0.8);    //    vec3 diffuse = vec3(0.0f,fragPos.y/(3.0f*2.0f),0.0f);    //   vec3 diffuse = vec3(fragPos.y/(3.0f*2.0f),fragPos.y/(3.0f*2.0f),fragPos.y/(3.0f*2.0f));    //    float sinTest = sin(fragPos.x*fragPos.y*fragPos.z*0.005f);    //    float cosTest = cos(fragPos.x*fragPos.y*fragPos.z*0.005f);    //    vec3 triTest = vec3(cosTest,1.0f,sinTest);    //vec3 diffuse = vec3(sinTest,sinTest,sinTest);    //    float coeff = fragPos.y/(3.0f*2.0f);    //  vec3 specular = toonSpecular(gubo.lightDir, norm, eyeDir, gubo.lightColor, 0.5);    vec3 ambient = diffColor1 * 0.025f;    outColor = vec4(diffuse + ambient, 1.0f);}