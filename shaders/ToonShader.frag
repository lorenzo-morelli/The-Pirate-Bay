#version 450#extension GL_ARB_separate_shader_objects : enablelayout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 0) out vec4 outColor;layout(set = 0, binding = 1) uniform GlobalUniformBufferObject {    bool spot;    vec3 lightPos;    vec3 lightDir;    vec4 lightColor;    vec3 eyePos;    float time;} gubo;vec3 toonDiffuse(vec3 L, vec3 N, vec3 V, vec3 light, vec3 dark) {    float cosAngle = dot(L, N);    vec3 color;    if (cosAngle >= 0.9f)    color = dark;    else{        color.x = int(mix(light.x,dark.x,cosAngle)*5.0f)/5.0f;        color.y = int(mix(light.y,dark.y,cosAngle)*5.0f)/5.0f;        color.z = int(mix(light.z,dark.z,cosAngle)*5.0f)/5.0f;    }    return color;}vec3 toonSpecular(vec3 L, vec3 N, vec3 V, vec3 C, float thr)  {    float intensity = dot(V, -reflect(L, N));    vec3 color;    if (intensity >= thr) color = C;    else color = vec3(0, 0, 0);    return color;}const float beta = 2.0f;const float g = 1.5;const float cosout = 0.85;const float cosin  = 0.85;void main() {    vec3 norm = normalize(fragNorm);    vec3 eyeDir = normalize(gubo.eyePos - fragPos);    float t = gubo.time;    float freq = 1.0f;    vec3 lightTest = normalize(vec3(1.0f, 1.0f, 1.0f));    // vec3 lightTest = normalize(vec3(cos(freq * t), sin(freq * t), 0.0f));    float normalizedAlt = (fragPos.y)/(1.5f);    normalizedAlt = int(normalizedAlt*10.0f)/10.0f;    vec3 highColor = vec3(0.0f);    if(normalizedAlt>=(0.6f))highColor = vec3(100.0f, 255.0f, 100.0f)/255.f;    else if(normalizedAlt>=(0.35f))highColor = vec3(50.0f, 225.0f, 50.0f)/255.f;    else if(normalizedAlt>=(0.25f))highColor = vec3(40.0f, 150.0f, 40.0f)/255.f;    else if(normalizedAlt>=(0.2f))highColor = vec3(200.0f, 100.0f, 0.0f)/255.f;    else highColor = vec3(255.0f, 255.0f, 0.0f)/255.f;    vec3 darkColor = highColor*0.25f;    if (!gubo.spot) {        vec3 diffuse = toonDiffuse(lightTest, norm, eyeDir, darkColor, highColor );        vec3 ambient = highColor * 0.025f;        outColor = vec4(diffuse + ambient, 1.0f);    } else {        vec3 lightDir = normalize(gubo.lightPos - fragPos);        float dim = clamp((dot(normalize(lightDir), gubo.lightDir) - cosout) / (cosin - cosout), 0.0f, 1.0f);        float fadeOut = pow(float(g/((gubo.lightPos-fragPos)/lightDir)), beta);        vec3 lightColor = highColor * fadeOut * dim;        //vec3 lightColor = gubo.lightColor.rgb * fadeOut * dim;        vec3 diffuse = toonDiffuse(lightTest, norm, eyeDir, darkColor , highColor );        vec3 specular = vec3(pow(clamp(dot(norm, normalize(lightDir + eyeDir)), 0.0f, 1.0f), 160.0f));        vec3 ambient = darkColor * 0.025f;        outColor = vec4(clamp((diffuse + specular) * lightColor.rgb + ambient, 0.0f, 1.0f), 1.0f);    }}